service:
  name: sls-blog-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    BLOGS_TABLE: Blogs-${self:provider.stage}
    #USERS_BLOG_TABLE: Users-Blog-${self:provider.stage}
    BLOG_ID_INDEX: UserIdIndex
    BLOGS_S3_BUCKET: sls-sing-blogs-${self:provider.stage}
    THUMBNAILS_S3_BUCKET: sls-blogs-sing-thumbnail-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    BUCKET_REGION: ${self:provider.region}
    IS_OFFLINE: "False"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.BLOGS_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
      Resource:
        - '*'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Blog API
        description: Serverless application for Blog
    models:
      - name: BlogRequest
        contentType: application/json
        schema: ${file(models/create-blog-request.json)}
      - name: UpdateBlogRequest
        contentType: application/json
        schema: ${file(models/update-blog-request.json)}
  topicName: blogAttachUrlTopic-${self:provider.stage}

functions:

  Auth:
    handler: src/lambda/auth/Auth0Authorizer.handler
    iamRoleStatementsInherit: true

  GetBlogs:
    handler: src/lambda/http/getBlogs.handler
    events:
      - http:
          method: get
          path: blogs
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}/index/${self:provider.environment.BLOG_ID_INDEX}


  CreateBlog:
    handler: src/lambda/http/createBlog.handler
    events:
      - http:
          method: post
          path: blogs
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new blog
            description: Create a new blog
            requestModels:
              'application/json': BlogRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      #- Effect: Allow
      #  Action:
      #    - dynamodb:PutItem
      #  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_BLOG_TABLE}


  UpdateBlog:
    handler: src/lambda/http/updateBlog.handler
    events:
      - http:
          method: patch
          path: blogs/{blogId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update blog
            description: Update a blog item
            requestModels:
              'application/json': UpdateBlogRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      #- Effect: Allow
      #  Action:
      #    - dynamodb:UpdateItem
      #  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_BLOG_TABLE}


  DeleteBlog:
    handler: src/lambda/http/deleteBlog.handler
    events:
      - http:
          method: delete
          path: blogs/{blogId}
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      #- Effect: Allow
      #  Action:
      #    - dynamodb:DeleteItem
      #  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_BLOG_TABLE}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: blogs/{blogId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true

  Thumbnail:
    handler: src/lambda/s3/Thumbnail.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      #- Effect: Allow
      #  Action:
      #    - dynamodb:UpdateItem
      #  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_BLOG_TABLE}

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    BlogsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: blogId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BLOGS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BLOG_ID_INDEX}
            KeySchema:
            - AttributeName: blogId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    #UsersBlogDynamoDBTable:
    #  Type: "AWS::DynamoDB::Table"
    #  Properties:
    #    AttributeDefinitions:
    #      - AttributeName: blogId
    #        AttributeType: S
    #    KeySchema:
    #      - AttributeName: blogId
    #        KeyType: HASH
    #    BillingMode: PAY_PER_REQUEST
    #    StreamSpecification:
    #      StreamViewType: NEW_IMAGE
    #    TableName: ${self:provider.environment.USERS_BLOG_TABLE}
    #    GlobalSecondaryIndexes:
    #      - IndexName: ${self:provider.environment.BLOG_ID_INDEX}
    #        KeySchema:
    #        - AttributeName: blogId
    #          KeyType: HASH
    #        Projection:
    #          ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    S3BucketBlogs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BLOGS_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic:
                !Ref blogAttachUrlTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: 'arn:aws:s3:::${self:provider.environment.BLOGS_S3_BUCKET}/*'
        Bucket: !Ref S3BucketBlogs

    ThumbnailBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetResizePhotosBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: 'arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*'
        Bucket: !Ref S3BucketThumbnail

    S3BucketThumbnail:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}
    ThumbnailPermissionS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref  ThumbnailLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}

    blogAttachUrlTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'Attach URL topic'
        TopicName: ${self:custom.topicName}

    blogAttachUrlTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      DependsOn:
        - blogAttachUrlTopic
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: AllowServerlessFrameworkEnterpriseToPublish
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'sns:Publish'
              Resource:
                Ref: blogAttachUrlTopic
        Topics:
          - !Ref blogAttachUrlTopic
